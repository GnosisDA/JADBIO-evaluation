# set up
rm(list = ls())
library(data.table)
library(BioDataome)
# set up
rm(list = ls())
library(data.table)
devtools::install_github("mensxmachina/BioDataome")
library(BioDataome)
options(download.file.method = 'auto')
# control panel
platform <- 'GPL13534'
sampleSizeLimit <- 40
singleClassLimit <- 10
dateToday <- format(Sys.time(), format='%Y-%m-%d')
# creating destination folder
destinationFolder <- dateToday
dir.create(destinationFolder, recursive = TRUE, showWarnings = FALSE)
# datasets available in dataome
metadata <- read.csv('../metadata.csv', stringsAsFactors = FALSE)
metadata$gse <- trimws(metadata$gse)
metadata$dataset <- trimws(metadata$dataset)
metadata$annotation <- trimws(metadata$annotation)
# keep the ones measured with the chosen platform and sample size limit
metadata <- metadata[trimws(as.character(metadata$technology)) == platform, ]
metadata <- metadata[metadata$samples >= sampleSizeLimit, ]
nDatasets <- dim(metadata)[1]
# fetching the information on the number of cases and controls
metadata$nCases <- NA
metadata$nControls <- NA
for(i in 1:nDatasets){
# printing info
print(paste0('Dataset: ', i))
# try catch for safety
tryCatch({
# download
annotation <- NULL
suppressWarnings(annotation <- fread(metadata$annotation[i]))
if(is.null(annotation)){
next
}
#transforming the class in numerical and calling it target
metadata$nCases[i] <- sum(annotation$class != 'control')
metadata$nControls[i] <- sum(annotation$class == 'control')
# if error, it prints what went wrong
}, error = function(e){print(paste0('Something wrong with ', metadata$gse[i]))})
}
# set up
rm(list = ls())
library(data.table)
library(BioDataome)
options(download.file.method = 'wget')
# control panel
platform <- 'GPL13534'
sampleSizeLimit <- 40
singleClassLimit <- 10
dateToday <- format(Sys.time(), format='%Y-%m-%d')
# creating destination folder
destinationFolder <- dateToday
dir.create(destinationFolder, recursive = TRUE, showWarnings = FALSE)
# datasets available in dataome
metadata <- read.csv('../metadata.csv', stringsAsFactors = FALSE)
metadata$gse <- trimws(metadata$gse)
metadata$dataset <- trimws(metadata$dataset)
metadata$annotation <- trimws(metadata$annotation)
# keep the ones measured with the chosen platform and sample size limit
metadata <- metadata[trimws(as.character(metadata$technology)) == platform, ]
metadata <- metadata[metadata$samples >= sampleSizeLimit, ]
nDatasets <- dim(metadata)[1]
# fetching the information on the number of cases and controls
metadata$nCases <- NA
metadata$nControls <- NA
for(i in 1:nDatasets){
# printing info
print(paste0('Dataset: ', i))
# try catch for safety
tryCatch({
# download
annotation <- NULL
suppressWarnings(annotation <- fread(metadata$annotation[i]))
if(is.null(annotation)){
next
}
#transforming the class in numerical and calling it target
metadata$nCases[i] <- sum(annotation$class != 'control')
metadata$nControls[i] <- sum(annotation$class == 'control')
# if error, it prints what went wrong
}, error = function(e){print(paste0('Something wrong with ', metadata$gse[i]))})
}
# looping over the datasets
for(i in 1:2){
# printing info
print(paste0('Dataset: ', i, ' out of ', nDatasets))
# try catch for safety
tryCatch({
# download
dataset <- fread(metadata$dataset[i])
# if error, it prints what went wrong
}, error = function(e){
print(paste0('Something wrong with ', metadata$gse[i]))
}
)
#annotation
annotation <- fread(metadata$annotation[i])
#keeping only the class from the annotation
annotation  <- annotation[ , c('samples', 'class')]
#transforming the class in numerical and calling it target
annotation$class[annotation$class != 'control'] <- '1'
annotation$class[annotation$class == 'control'] <- '0'
annotation$target <- as.numeric(annotation$class)
annotation$class <- NULL
#merging
toWrite <- merge(dataset, annotation, by = 'samples')
#writing
fwrite(toWrite, file = file.path(destinationFolder,
paste0(metadata$gse[i], '.csv')),
quote = FALSE, row.names = FALSE);
}
