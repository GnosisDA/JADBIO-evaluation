# loading libraries and functions
rm(list = ls())
library(ggplot2)
library(grid)
source('../ancillaryFunctions.R')
# results folder
resultsFolder <- '../'
# JADBIO settings to consider
settings <- c('1_overall', '5_FS')
# loading libraries and functions
rm(list = ls())
library(ggplot2)
library(grid)
source('../ancillaryFunctions.R')
# results folder
resultsFolder <- '../'
# JADBIO settings to consider
settings <- c('1_overall', '5_FS')
# looping over settings
setting <- settings[1]
# load data
load(file.path(resultsFolder, 'JADBIO_results.RData'))
load(file.path(resultsFolder, 'auto-sklearn_results.RData'))
# auto-sklearn model to use
aslModelToUse <- 'ensembl_auc'
#### Script for producing Supplementary Figure 2 (auto-sklearn results) ####
#### Setup ####
# loading libraries and functions
rm(list = ls())
library(ggplot2)
library(grid)
source('../ancillaryFunctions.R')
# results folder
resultsFolder <- '../'
# JADBIO settings to consider
settings <- c('1_overall', '5_FS')
# auto-sklearn model to use
aslModelToUse <- 'ensembl_auc'
# looping over settings
setting <- settings[1]
# load data
load(file.path(resultsFolder, 'JADBIO_results.RData'))
load(file.path(resultsFolder, 'auto-sklearn_results.RData'))
# chosen setting
JADBIO_results <- JADBIO_results[JADBIO_results$setting == setting, ]
# adding id
JADBIO_results$id <- paste(JADBIO_results$datasetName, '_', JADBIO_results$split, sep = '')
autosklearn_results$id <- paste(autosklearn_results$datasetName, '_', autosklearn_results$split, sep = '')
# number of runs
nJADBIO_results <- dim(JADBIO_results)[1]
nAutosklearn_results <- dim(autosklearn_results)[1]
nRatio <- nAutosklearn_results / nJADBIO_results
print('Number of ASL runs:')
print(nAutosklearn_results)
print('Number of JADBIO runs:')
print(nJADBIO_results)
print('Ratio')
print(nAutosklearn_results / nJADBIO_results)
# types of runs
table(JADBIO_results$type)/2
table(autosklearn_results$type)/2
#aligning the data
toKeep <- intersect(JADBIO_results$id, autosklearn_results$id)
JADBIO_results <- JADBIO_results[JADBIO_results$id %in% toKeep, ]
JADBIO_results <- JADBIO_results[order(JADBIO_results$id), ];
autosklearn_results <- autosklearn_results[autosklearn_results$id %in% toKeep, ]
autosklearn_results <- autosklearn_results[order(autosklearn_results$id), ];
# data to plot
toPlot <- data.frame(percPerformances = JADBIO_results[ , 'holdoutEstimate'] /
autosklearn_results[ , aslModelToUse],
percVars =  log10((as.numeric(autosklearn_results$numInitialVars) + 1)/
(as.numeric(JADBIO_results$numSelectedVars) + 1) ));
JADBIO_results[ , 'holdoutEstimate']
autosklearn_results[ , aslModelToUse]
aslModelToUse
# data to plot
toPlot <- data.frame(percPerformances = JADBIO_results[ , 'holdoutEstimate'] /
autosklearn_results[ , aslModelToUse],
percVars =  log10((as.numeric(autosklearn_results$numInitialVars) + 1)/
(as.numeric(JADBIO_results$numSelectedVars) + 1) ));
autosklearn_results[ , aslModelToUse]
aslModelToUse
aslModelToUse= ''
aslModelToUse= 'ensemblAUC'
# data to plot
toPlot <- data.frame(percPerformances = JADBIO_results[ , 'holdoutEstimate'] /
autosklearn_results[ , aslModelToUse],
percVars =  log10((as.numeric(autosklearn_results$numInitialVars) + 1)/
(as.numeric(JADBIO_results$numSelectedVars) + 1) ));
# median and mean values
medianValue <- median(toPlot$percPerformances, na.rm = TRUE)
meanValue <- mean(toPlot$percPerformances, na.rm = TRUE)
print('Median value performance ratio:')
print(medianValue)
medianValueVars <- median(toPlot$percVars, na.rm = TRUE)
print('Median value variables ratio:')
print(medianValueVars)
toPlot$percVars
autosklearn_results$numInitialVars
JADBIO_results$numSelectedVars
# note: 32% is obtained considering datasets where most probably dummy variables were removed
sum(as.numeric(JADBIO_results$numSelectedVars) < as.numeric(JADBIO_results$numInitialVars) &
as.numeric(JADBIO_results$numSelectedVars) > 25)/dim(JADBIO_results)[1]
idx <- which(as.numeric(JADBIO_results$numSelectedVars) < as.numeric(JADBIO_results$numInitialVars) &
as.numeric(JADBIO_results$numSelectedVars) > 25)
summary(as.numeric(JADBIO_results[idx, 'numSelectedVars']))
# summary and t test
summary(toPlot$percPerformances)
t.test(toPlot$percPerformances, mu = 1)
# note: 32% is obtained considering datasets where most probably dummy variables were removed
sum(as.numeric(JADBIO_results$numSelectedVars) < as.numeric(JADBIO_results$numInitialVars) &
as.numeric(JADBIO_results$numSelectedVars) > 25)/dim(JADBIO_results)[1]
idx <- which(as.numeric(JADBIO_results$numSelectedVars) < as.numeric(JADBIO_results$numInitialVars) &
as.numeric(JADBIO_results$numSelectedVars) > 25)
summary(as.numeric(JADBIO_results[idx, 'numSelectedVars']))
# note: 32% is obtained considering datasets where most probably dummy variables were removed
sum(as.numeric(JADBIO_results$numSelectedVars) < as.numeric(JADBIO_results$numInitialVars) &
as.numeric(JADBIO_results$numSelectedVars) > 25)/dim(JADBIO_results)[1]
# summary and t test
summary(toPlot$percPerformances)
t.test(toPlot$percPerformances, mu = 1)
sum(as.numeric(JADBIO_results$numSelectedVars) <= 10)/dim(JADBIO_results)[1]
sum(as.numeric(JADBIO_results$numSelectedVars) <= 25)/dim(JADBIO_results)[1]
sum(as.numeric(JADBIO_results$numSelectedVars) <= 25)/dim(JADBIO_results)[1]
# note: 32% is obtained considering datasets where most probably dummy variables were removed
sum(as.numeric(JADBIO_results$numSelectedVars) < as.numeric(JADBIO_results$numInitialVars) &
as.numeric(JADBIO_results$numSelectedVars) < 25)/dim(JADBIO_results)[1]
sum(as.numeric(JADBIO_results$numSelectedVars) <= 25)/dim(JADBIO_results)[1]
sum(as.numeric(JADBIO_results$numSelectedVars) <= 25) /
dim(JADBIO_results)[1] # note: 32% is obtained considering datasets where most probably dummy variables were removed
# median and mean values
medianValue <- median(toPlot$percPerformances, na.rm = TRUE)
meanValue <- mean(toPlot$percPerformances, na.rm = TRUE)
print('Median value performance ratio:')
# percentage of times with fewer variables
sum(as.numeric(JADBIO_results$numSelectedVars) <= 10)/dim(JADBIO_results)[1]
library(reshape2)
toPlot2 <- data.frame(jad = as.numeric(JADBIO_results[ , 'holdoutEstimate']),
autosklearn = as.numeric(autosklearn_results[ , 'bestModel_auc']))
toPlot2<- melt(toPlot2)
head(toPlot2)
toPlot2 <- data.frame(jad = as.numeric(JADBIO_results[ , 'holdoutEstimate']),
autosklearn = as.numeric(autosklearn_results[ , 'bestModel_auc']))
library(reshape2)
toPlot2 <- data.frame(jad = as.numeric(JADBIO_results[ , 'holdoutEstimate']),
autosklearn = as.numeric(autosklearn_results[ , 'bestModelAUC']))
toPlot2<- melt(toPlot2)
library(reshape2)
toPlot2 <- data.frame(jad = as.numeric(JADBIO_results[ , 'holdoutEstimate']),
autosklearn = as.numeric(autosklearn_results[ , 'bestModelAUC']))
toPlot2<- melt(toPlot2)
head(toPlot2)
ggplot(toPlot2,aes(x=value, fill=variable)) + geom_density(alpha=0.25)
t.test(JADBIO_results[ , 'holdoutEstimate'],
autosklearn_results[ , 'bestModel_auc'], paired = TRUE)
t.test(JADBIO_results[ , 'holdoutEstimate'],
autosklearn_results[ , 'bestModelAUC'], paired = TRUE)
source('C:/Users/vlagani/repositories/JADBIO-evaluation/code_figures/S_Figure_2/Panel_a.R')
source('C:/Users/vlagani/repositories/JADBIO-evaluation/code_figures/S_Figure_2/Panel_a.R')
source('C:/Users/vlagani/repositories/JADBIO-evaluation/code_figures/S_Figure_2/Panel_a.R')
source('C:/Users/vlagani/repositories/JADBIO-evaluation/code_figures/S_Figure_2/Panel_a.R')
source('C:/Users/vlagani/repositories/JADBIO-evaluation/code_figures/S_Figure_2/Panel_a.R')
